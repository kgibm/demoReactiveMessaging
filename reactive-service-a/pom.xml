<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <artifactId>reactive-service-a</artifactId>
  <packaging>war</packaging>

	<parent>
		<version>1.0-SNAPSHOT</version>
		<groupId>com.example</groupId>
		<artifactId>demoReactiveMessaging</artifactId>
	</parent>

  <properties>
    <image.name>${project.artifactId}</image.name>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.eclipse.microprofile</groupId>
      <artifactId>microprofile</artifactId>
      <version>6.0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-reactive-messaging</artifactId>
      <version>4.5.0</version>
      <type>pom</type>
    </dependency>
    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-reactive-messaging-provider</artifactId>
      <version>4.5.0</version>
    </dependency>
    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-reactive-messaging-kafka</artifactId>
      <version>4.5.0</version>
    </dependency>
    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-reactive-streams-operators</artifactId>
      <version>1.0.13</version>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-core</artifactId>
      <version>1.10.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-clients</artifactId>
      <version>3.4.0</version>
    </dependency>
    <dependency> 
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>2.0.7</version>
    </dependency>
    <dependency> 
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <version>2.0.7</version>
    </dependency>

    <dependency>
      <groupId>io.reactivex.rxjava3</groupId>
      <artifactId>rxjava</artifactId>
      <version>3.1.6</version>
    </dependency>
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>6.0.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>${project.artifactId}</finalName>
  </build>
  <profiles>
    <profile>
      <id>liberty</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>3.3.2</version>
            <configuration>
              <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>
            <version>3.1.1</version>
            <configuration>
              <!--
                Disable the default deploy plugin so that we can
                use the deploy phase to build the container.
              -->
              <skip>true</skip>
            </configuration>
          </plugin>
          <plugin>
            <groupId>io.openliberty.tools</groupId>
            <artifactId>liberty-maven-plugin</artifactId>
            <version>${openliberty.maven.version}</version>
            <executions>
              <execution>
                <id>package-server</id>
                <phase>package</phase>
                <goals>
                  <goal>create</goal>
                  <goal>install-feature</goal>
                  <goal>deploy</goal>
                  <goal>package</goal>
                </goals>
                <configuration>
                  <outputDirectory>target/wlp-package</outputDirectory>
                </configuration>
              </execution>
            </executions>
            <configuration>
              <assemblyArtifact>
                <groupId>io.openliberty</groupId>
                <artifactId>openliberty-runtime</artifactId>
                <version>${openliberty.version}</version>
                <type>zip</type>
              </assemblyArtifact>
              <include>runnable</include>
              <serverName>${project.build.finalName}</serverName>
              <bootstrapProperties>
                <project.name>${project.build.finalName}</project.name>
                <jwt.issuer>https://example.com</jwt.issuer>
              </bootstrapProperties>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>3.1.0</version>
            <executions>
              <execution>
                <phase>deploy</phase>
                <configuration>
                  <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                    <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag}" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="build" />
                      <arg value="--cap-add"/>
                      <arg value="CHECKPOINT_RESTORE"/>
                      <arg value="--cap-add" />
                      <arg value="NET_ADMIN" />
                      <arg value="--cap-add" />
                      <arg value="SYS_PTRACE" />
                      <arg value="--security-opt" />
                      <arg value="seccomp=unconfined" />
                      <arg value="--build-arg" />
                      <arg value="VERSION=${project.version}" />
                      <arg value="--build-arg" />
                      <arg value="AUTHORS=${image.authors}" />
                      <arg value="--build-arg" />
                      <arg value="VENDOR=${image.vendor}" />
                      <arg value="--build-arg" />
                      <arg value="SUMMARY=${image.summary}" />
                      <arg value="--build-arg" />
                      <arg value="NAME=${image.name}" />
                      <arg value="--build-arg" />
                      <arg value="DESCRIPTION=${image.description}" />
                      <arg value="--build-arg" />
                      <arg value="URL=${image.url}" />
                      <arg value="--build-arg" />
                      <arg value="SOURCE=${image.source}" />
                      <arg value="--file" />
                      <arg value="Containerfile" />
                      <arg line="${image.builder.arguments}" />
                      <arg value="-t" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}-temp" />
                      <arg value="." />
                    </exec>

                    <!-- Remove any previously failed image builds -->
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="rm" />
                      <arg value="-i" />
                      <arg value="instanton-temp" />
                    </exec>

                    <!-- Run the image to generate the CheckPoint container -->
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="run" />
                      <arg value="--platform" />
                      <arg value="linux/amd64" />
                      <arg value="--network" />
                      <arg value="kafka" />
                      <arg value="--name" />
                      <arg value="instanton-temp" />
                      <arg value="--privileged" />
                      <arg value="--user" />
                      <arg value="root" />
                      <arg value="--env" />
                      <arg value="WLP_CHECKPOINT=${checkpoint.type}" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}-temp" />
                    </exec>

                    <!-- Commit the above image -->
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="commit" />
                      <arg value="instanton-temp" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    </exec>

                    <echo level="info" message="==================" />
                    <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag}" />
                    <echo level="info" message="To run this image:" />
                    <echo level="info" message="  ${image.builder} run --rm -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
